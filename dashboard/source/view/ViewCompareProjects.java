package view;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import javax.swing.JFrame;
import javax.swing.JPanel;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.gantt.Task;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.time.SimpleTimePeriod;

import utils.Pair;

import examples.TestEntity;
import control.ControlEnvironment;





public class ViewCompareProjects extends JFrame
{
	private ControlEnvironment cEnv;

	
	private final String StrRealPeriod = "Périodes réelles";
	private final String StrPrevPeriod = "Périodes prévisionnelles";
	private final String StrRealDuration = "Duréées réelles";
	private final String StrPrevDuration = "Durées prévisionnelles";
	private final String StrDurationOffset = "Dépassements en durée";
	private final String StrNbResources = "Nombres de ressources";
	private final String StrNbWBEs = "Nombres de taches";
	private final String StrRealWorkAmount = "Charges réelles";
	private final String StrPrevWorkAmount = "Charges prévisionnelles";
	private final String StrWorkAmountOffset = "Dépassements en charges";
	
	
	 // Variables for gui
    private javax.swing.JComboBox criteriaCombo;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JPanel headerPanerl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of gui variables declaration
    	
	
	
	public ViewCompareProjects(ControlEnvironment pCEnv)
	{
		cEnv = pCEnv;
		initComponents();
		fillCriteriaCombo();	
		updateGraphPanel();
        this.setSize(700,400); 
        Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((screen.width - this.getSize().width)/2,(screen.height - this.getSize().height)/2);	 
    }


	
	
	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
	private void initComponents() {
        headerPanerl = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        criteriaCombo = new javax.swing.JComboBox();
        graphPanel = new javax.swing.JPanel();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jPanel1.setLayout(new java.awt.GridLayout(2, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Crit\u00e8re");
        jPanel1.add(jLabel1);

        criteriaCombo.setMinimumSize(new java.awt.Dimension(100, 19));
        criteriaCombo.setPreferredSize(new java.awt.Dimension(200, 19));
        criteriaCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criteriaComboActionPerformed(evt);
            }
        });

        jPanel1.add(criteriaCombo);

        headerPanerl.add(jPanel1);

        getContentPane().add(headerPanerl, java.awt.BorderLayout.NORTH);

        graphPanel.setLayout(new java.awt.BorderLayout(10, 10));

        getContentPane().add(graphPanel, java.awt.BorderLayout.CENTER);

        pack();
    }


    
    
    
    
    private void criteriaComboActionPerformed(java.awt.event.ActionEvent evt) 
    {
        updateGraphPanel();
        graphPanel.updateUI();
    }
    
    
    
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) 
    {
        System.exit(0);
    }
    
    
    

    

	
	private void fillCriteriaCombo() 
	{
		criteriaCombo.addItem(StrRealPeriod);
		criteriaCombo.addItem(StrPrevPeriod);
		criteriaCombo.addItem(StrRealDuration);		
		criteriaCombo.addItem(StrPrevDuration);		
		criteriaCombo.addItem(StrDurationOffset);		
		criteriaCombo.addItem(StrNbResources);
		criteriaCombo.addItem(StrNbWBEs);
		criteriaCombo.addItem(StrRealWorkAmount);
		criteriaCombo.addItem(StrPrevWorkAmount);		
		criteriaCombo.addItem(StrWorkAmountOffset);
	}





    
	private void updateGraphPanel() 
	{
		String str = (String)criteriaCombo.getSelectedItem();
		if(str == StrRealPeriod)
		{			
			ArrayList<Pair<String,Date>> realStartDatesMap = cEnv.getRealStartDatesMap();
			ArrayList<Pair<String,Date>> realEndDatesMap = cEnv.getRealEndDatesMap();
			createGanttChart(StrRealPeriod,"Projets", "dates", realStartDatesMap,realEndDatesMap);			
		}
		else if(str == StrPrevPeriod)
		{
			ArrayList<Pair<String,Date>> prevStartDatesMap = cEnv.getPrevStartDatesMap();
			ArrayList<Pair<String,Date>> prevEndDatesMap = cEnv.getPrevEndDatesMap();
			createGanttChart(StrRealPeriod, "Projets", "dates",prevStartDatesMap,prevEndDatesMap);
		}
		else if(str == StrRealDuration)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getRealDurationsMap();
			createBarChart(StrRealDuration,"Projets", "durée en jours", map);
		}
		else if(str == StrPrevDuration)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getPrevDurationsMap();
			createBarChart(StrPrevDuration,"Projets", "durée en jours", map);
		}
		else if(str == StrDurationOffset)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getDurationOffsetsMap();
			createBarChart(StrDurationOffset,"Projets", "durée en jours", map);
		}
		else if(str == StrNbResources)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getNbResourcesMap();
			createBarChart(StrNbResources,"Projets", StrNbResources, map);
		}
		else if(str == StrNbWBEs)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getNbWBEsMap();
			createBarChart(StrNbWBEs,"Projets", StrNbWBEs, map);
		}
		else if(str == StrRealWorkAmount)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getRealWorkAmountsMap();
			createBarChart(StrNbResources,"Projets", "charges", map);
		}
		else if(str == StrPrevWorkAmount)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getPrevWorkAmountsMap();
			createBarChart(StrPrevWorkAmount,"Projets", "charges", map);
		}
		else if(str == StrWorkAmountOffset)
		{
			ArrayList<Pair<String,Number>> map = cEnv.getWorkAmountOffsetsMap();
			createBarChart(StrPrevWorkAmount,"Projets", "charges", map);
		}
	}
	
	
	
	private void createBarChart(String title,String xLabel, String yLabel, ArrayList<Pair<String, Number>> map)
	{
		// row keys...
		String series1 = title;
		 
		// create the dataset...
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        // column keys...
        for(Pair<String, Number> pair: map)
        {
        	dataset.addValue(pair.getSecond(), series1, pair.getFirst());            
        }
		
		JFreeChart chart = ChartFactory.createBarChart("",
				"(" + xLabel + ")",
				"(" + yLabel + ")",
                dataset,
                PlotOrientation.VERTICAL,
                true, // show legend
                true,
                true
               );
		graphPanel.removeAll();
		graphPanel.add(java.awt.BorderLayout.CENTER,  new ChartPanel(chart));
				
	}




	private void createGanttChart(String title, String xLabel, String yLabel,ArrayList<Pair<String,Date>> startDatesMap, ArrayList<Pair<String,Date>> endDatesMap)
	{
		TaskSeriesCollection dataset = new TaskSeriesCollection();
		assert startDatesMap.size() == endDatesMap.size();
		int nbProjects = startDatesMap.size();
		TaskSeries ts = new TaskSeries(title);	
		for(int i=0; i<nbProjects; i++)
		{
			String projName = startDatesMap.get(i).getFirst();
			try 
			{
				ts.add(
						new Task(
								projName, 
								new SimpleTimePeriod(
										startDatesMap.get(i).getSecond(), 
										endDatesMap.get(i).getSecond()											
								)
						)
				);

			} 
			catch (Exception e) 
			{
				assert true;
			}
		}
		
		dataset.add(ts);
		JFreeChart chart = ChartFactory.createGanttChart("", 
				"(" + xLabel + ")",
				"(" + yLabel + ")",	               
				dataset, true, false, false);
		graphPanel.removeAll();
		graphPanel.add(java.awt.BorderLayout.CENTER,  new ChartPanel(chart));
		
	}
	
	
	
	
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        new ViewCompareProjects(
        			new ControlEnvironment(
        					TestEntity.createEnvironment()
        			)
        ).setVisible(true);
    }
    


}
